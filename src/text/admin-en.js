/* @flow */

import generalText from './general.en';

const { election, ...restGeneral} = generalText;

const electionAdmin = {
  votesOutsideCensus: 'Votes outside census',
  multipleTimes: 'Varying',
  manageElections: 'Manage elections',
  manageableElections: 'Elections you can manage',
  createNewElection: 'Create new election',
  addCandidate: 'Add candidate',
  editCandidate: 'Edit candidate',
  deleteCandidate: 'Delete candidate',
  candidateNamePlaceHolder: 'Candidate name',
  coCandidateNamePlaceHolder: 'Candidate name',
  closed: 'Closed',
  published: 'Published',
  draft: 'Draft',
  ongoing: 'Ongoing',
  multipleStatuses: 'Varying',
  newCoCandidate: 'New cocandidate',
  candidateUrl: 'https://example.org',
  remove: 'Remove',
  editBoardLeaderCandidate: 'Edit candidate and cocandidates',
  addPrefTeamCandidate: 'Add a candidate and cocandidates',
  noCandidatesDefined: 'There are no candidates in the list.',
  noCandidatesFound: 'No candidates matches the search criterias',
  electionInfo: 'Election info',
  electionType: 'Election type',
  electionStatus: 'Election status',
  selectType: 'Choose election type',
  selectLevel: 'Election of',
  selectParish: 'Parish',
  voterSettings: 'Voter groups and candidate settings',
  activeElectionsHeader: 'Which groups should be represented, and how many candidates shall be elected from each of the groups?',
  group: 'Group',
  nrOfCandidates: 'Number of candidates',
  nrOfCoCandidates: 'Number of co-candidates',
  votingPeriod: 'Voting period',
  votingPeriodSubHeader: 'In which time period should the election be open for voters?',
  voterGroup: 'Voting group',
  singleVotingPeriod: 'Same voting period for all groups',
  multipleVotingPeriods: 'Invidual voting periods for groups',
  voterInfo: 'Information for voters',
  voterInfoFormDesc: 'Information given here will be visible on the front page.',
  mandatePeriod: 'Mandate period',
  mandatePeriodShared: 'Shared mandate period for all voter groups',
  mandatePeriodMultiple: 'Specific mandate period for each voter group',
  voterContactInfo: 'Voter contact info',
  voterContactInfoShared: 'Shared contact info for all voter groups',
  voterContactInfoMultiple: 'Specific contact info each voter group',
  voterInfoUrl: 'Link to election details',
  voterInfoUrlShared: 'Shared webpage for all voter groups',
  voterInfoUrlMultiple: 'Specific webpage for each voter group',
  adminRoles: 'Administrative roles',
  adminRolesDesc: 'The roles indicate who has permissions on this election.',
  electionAdmins: 'Election admins',
  electionAdminsDesc: 'Can change settings and information for the election, count votes and delegate permissions.',
  electionOpens: 'Election opens',
  electionCloses: 'Election closes',
  goTo: 'Go to',
  settings: 'election settings',
  status: 'election status',
  noManageableElections: 'There are currently no elections where you are registered as an administrator.',
  valueNotSet: 'not set',
  noActiveElections: 'There are currently no active elections.',
  prefTeamHeader: 'Here you can add and administer running candidates and co-candidates.',
  candidateCounter: 'Has {{count}} of {{minCount}} candidates',
  publish: 'Publish',
  publishElection: 'Publish election',
  publishElectionModalInfo: 'The election will be visible to the voters and start at the specified time.',
  unpublish: 'Unpublish',
  unpublishElection: 'Unpublish election',
  unpublishElectionModalInfo: 'The election will not start at the specified time.',
  announceElectionHeader: 'Make election visible',
  announceElectionConfirm: 'Make visible',
  announceElectionInfoOne: 'The election and voting period will be visible on the voters front page.',
  announceElectionInfoTwo: 'Note that the election cannot start before it meets the minimum requirements and is approved by the election owner.',
  announceElectionReadMore: 'Read more about making an election visible',
  unannounceElectionHeader: 'Remove from front page',
  unannounceElectionConfirm: 'Make invisible',
  unannounceElectionInfoOne: 'The election and voting period will be invisible on the voters front page.',
  unannounceElectionInfoTwo: 'You can later make the election visible again.',
  electionNotStarted: 'The election has not started.',
  electionKey: 'Election key',
  electionKeyMissing: 'An election key is needed to count the votes.',
  electionKeyExists: 'A key exists for this election.',
  electionKeyCreate: 'Create key',
  electionKeySave: 'Save key',
  electionKeyStatusKeepItSafe: 'Make sure the key is stored somewhere safe. Without the key, votes cannot be counted.',
  electionKeyStatusCanReplace: 'You can replace the old key with a new one as long as the election has not started.',
  electionKeyReadMore: 'Read more about election keys',
  statusDraftNotReady: 'Election does not meet the minimum requirements',
  statusDraftReady: 'Election meets the minimum requirements',
  statusCanAnnounce: 'You can make the voting period visible for the voters',
  statusDoAnnounce: 'Make visible',
  statusIsAnnounced: 'The voting period is visible on the voters front page',
  statusDoUnannounce: 'Remove from front page',
  statusThisIsMissing: 'This is missing',
  statusOpensAutomatically: "The election is published and starts automatically at the specified time.",
  blockerUnknown: 'Something unexpected is wrong',
  blockerMissingKey: 'Election key',
  blockerStartBeforeEnd: 'Start time must be before end time',
  adminUser: 'Single users',
  adminGroup: 'Groups',
};

const prefElec = {
  candPageDesc: 'Here you can add candidates that are electable for the various voter groups.{nl}' +
                'The election must have at least as many candidates per voter group as stated in {{infoLink}}.'
};

const census = {
  censusPageDesc: 'Here you can create and administer censuses.',
  uploadCensusFile: 'Upload census file',
  group: 'Group',
  person: 'Person',
  addPerson: 'Add person',
  addPersons: 'Add persons in',
  deleteCensus: 'Delete census',
  addPersonModalHeader: 'Add persons to the census',
  addTo: 'Add',
  addPersonInputPlaceholder: 'Enter username, name or social security number',
  addPersonHelpText: 'You can also add multiple persons, separated by a comma'
};

const formErrors = {
  invalidDates: 'Start time must be before closing time.',
  invalidEmail: 'Invalid email address.',
  invalidUrl: 'Invalid url.'
};

export default {
  election: Object.assign({}, election, { ...electionAdmin }),
  ...restGeneral,
  i18n: {
    datePlaceHolder: 'dd/mm/yyyy',
    timePlaceHolder: 'hh:mm'
  },
  formErrors,
  prefElec,
  census
}
